{"version":3,"sources":["webpack://@js-sugar/date/webpack/universalModuleDefinition","webpack://@js-sugar/date/webpack/bootstrap","webpack://@js-sugar/date/webpack/runtime/define property getters","webpack://@js-sugar/date/webpack/runtime/hasOwnProperty shorthand","webpack://@js-sugar/date/webpack/runtime/make namespace object","webpack://@js-sugar/date/./src/date/date-time.ts","webpack://@js-sugar/date/./src/date/gregorian/gregorian-date-time.ts"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","date","set","toGregorian","datetime","gDate","Date","getFullYear","getMonth","getDate","this","hour","minute","millisecond","unit","year","month","day","second","getTime","add","amounts","setDate","days","setMonth","months","setFullYear","years","result","GregorianDateTime","subtract","isAfter","dateTime","gDate1","gDate2","isSameOrAfter","isBefore","isSameOrBefore","clone","format","_string","Error","diff","gDatetime","gStartDayOfTheYear","lastDayOfYear","startDayOfTheYear","week1","week2","Math","ceil","floor"],"mappings":"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","file":"gregorian.bundle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@js-sugar/date\"] = factory();\n\telse\n\t\troot[\"@js-sugar/date\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export interface DateTimeDescriptor {\r\n    year: number;\r\n    month: number;\r\n    day: number;\r\n    hour: number;\r\n    minute: number;\r\n    second: number;\r\n    millisecond: number;\r\n}\r\n\r\nexport interface DateTimeAmounts {\r\n    years: number;\r\n    months: number;\r\n    days: number;\r\n    hours: number;\r\n    minutes: number;\r\n    seconds: number;\r\n    milliseconds: number;\r\n}\r\n\r\nexport abstract class DateTime {\r\n    abstract get(unit: 'year' | 'month' | 'day' | 'hour' | 'minute' | 'second' | 'ms'): number;\r\n    abstract set(value: DateTimeDescriptor): DateTime;\r\n    abstract toGregorian(datetime: DateTime): Date;\r\n    abstract add(amounts: DateTimeAmounts): DateTime;\r\n    abstract subtract(amounts: DateTimeAmounts): DateTime;\r\n    abstract isAfter(dateTime: DateTime): boolean;\r\n    abstract isSameOrAfter(dateTime: DateTime): boolean;\r\n    abstract isBefore(dateTime: DateTime): boolean;\r\n    abstract isSameOrBefore(dateTime: DateTime): boolean;\r\n    abstract clone(): DateTime;\r\n    abstract format(input: string): string;\r\n    abstract diff(datetime: DateTime): number;\r\n    abstract get dayOfWeek(): number;\r\n    abstract get weeksInYear(): number;\r\n    abstract get weekYear(): number;\r\n    abstract get isLeapYear(): boolean;\r\n    abstract get quarter(): number;\r\n}\r\n","import { DateTime, DateTimeAmounts, DateTimeDescriptor } from '../date-time';\r\n\r\nexport class GregorianDateTime extends DateTime {\r\n    private year: number;\r\n    private month: number;\r\n    private day: number;\r\n    private hour: number;\r\n    private minute: number;\r\n    private second: number;\r\n    private millisecond: number;\r\n    constructor(date?: DateTimeDescriptor) {\r\n        super();\r\n        if (date) {\r\n            this.set(date);\r\n        }\r\n    }\r\n    toGregorian(datetime: DateTime): Date {\r\n        const gDate = new Date(datetime.get('year'), datetime.get('month'), datetime.get('day'));\r\n        return new Date(gDate.getFullYear(), gDate.getMonth(), gDate.getDate(),\r\n            this.hour, this.minute, this.millisecond);\r\n    }\r\n    get(unit: 'year' | 'month' | 'day' | 'hour' | 'minute' | 'second' | 'ms'): number {\r\n        switch (unit) {\r\n            case 'year':\r\n                return this.year;\r\n            case 'month':\r\n                return this.month;\r\n            case 'day':\r\n                return this.day;\r\n            case 'hour':\r\n                return this.hour;\r\n            case 'minute':\r\n                return this.minute;\r\n            case 'second':\r\n                return this.second;\r\n            case 'ms':\r\n                return this.millisecond;\r\n            default:\r\n                return this.toGregorian(this).getTime();\r\n        }\r\n    }\r\n    set(value: DateTimeDescriptor): DateTime {\r\n        this.year = value.year;\r\n        this.month = value.month;\r\n        this.day = value.day;\r\n        this.hour = value.hour;\r\n        this.minute = value.minute;\r\n        this.second = value.second;\r\n        this.millisecond = value.millisecond;\r\n        return this;\r\n    }\r\n    add(amounts: DateTimeAmounts): DateTime {\r\n        const gDate = this.toGregorian(this);\r\n        gDate.setDate(gDate.getDate() + amounts.days);\r\n        gDate.setMonth(gDate.getMonth() + amounts.months);\r\n        gDate.setFullYear(gDate.getFullYear() + amounts.years);\r\n        const result = new GregorianDateTime();\r\n        result.year = gDate.getFullYear();\r\n        result.month = gDate.getMonth();\r\n        result.day = gDate.getDate();\r\n        result.hour = this.hour;\r\n        result.minute = this.minute;\r\n        result.second = this.second;\r\n        result.millisecond = this.millisecond;\r\n        return result;\r\n    }\r\n    subtract(amounts: DateTimeAmounts): DateTime {\r\n        const gDate = this.toGregorian(this);\r\n        if (amounts.days !== 0) {\r\n            gDate.setDate(gDate.getDate() - amounts.days);\r\n        }\r\n        if (amounts.months !== 0) {\r\n            gDate.setMonth(gDate.getMonth() - amounts.months);\r\n        }\r\n        if (amounts.years !== 0) {\r\n            gDate.setFullYear(gDate.getFullYear() - amounts.years);\r\n        }\r\n        const result = new GregorianDateTime();\r\n        result.year = gDate.getFullYear();\r\n        result.month = gDate.getMonth();\r\n        result.day = gDate.getDate();\r\n        result.hour = this.hour;\r\n        result.minute = this.minute;\r\n        result.second = this.second;\r\n        result.millisecond = this.millisecond;\r\n        return result;\r\n    }\r\n    isAfter(dateTime: DateTime): boolean {\r\n        const gDate1 = this.toGregorian(dateTime);\r\n        const gDate2 = this.toGregorian(this);\r\n        return gDate1.getTime() > gDate2.getTime() ? true : false;\r\n    }\r\n    isSameOrAfter(dateTime: DateTime): boolean {\r\n        const gDate1 = this.toGregorian(dateTime);\r\n        const gDate2 = this.toGregorian(this);\r\n        return gDate1.getTime() >= gDate2.getTime() ? true : false;\r\n    }\r\n    isBefore(dateTime: DateTime): boolean {\r\n        const gDate1 = this.toGregorian(dateTime);\r\n        const gDate2 = this.toGregorian(this);\r\n        return gDate1.getTime() < gDate2.getTime() ? true : false;\r\n    }\r\n    isSameOrBefore(dateTime: DateTime): boolean {\r\n        const gDate1 = this.toGregorian(dateTime);\r\n        const gDate2 = this.toGregorian(this);\r\n        return gDate1.getTime() <= gDate2.getTime() ? true : false;\r\n    }\r\n    clone(): DateTime {\r\n        const result = new GregorianDateTime();\r\n        result.year = this.year;\r\n        result.month = this.month;\r\n        result.day = this.day;\r\n        result.hour = this.hour;\r\n        result.minute = this.minute;\r\n        result.second = this.second;\r\n        result.millisecond = this.millisecond;\r\n        return result;\r\n    }\r\n    format(_string: any): string {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    diff(datetime: DateTime): number {\r\n        const gDate = new Date(this.toGregorian(this));\r\n        const gDatetime = new Date(datetime.get('year'),\r\n            datetime.get('month'),\r\n            datetime.get('day'));\r\n        const gStartDayOfTheYear = new Date(gDatetime.getFullYear(), gDatetime.getMonth(), gDatetime.getDate());\r\n        return ((gDate.getTime() - gStartDayOfTheYear.getTime()));\r\n    }\r\n    get dayOfWeek(): number {\r\n        const gDate = new Date(this.toGregorian(this));\r\n        return gDate.getDate() % 7;\r\n    }\r\n    get weeksInYear(): number {\r\n        const lastDayOfYear = new GregorianDateTime();\r\n        lastDayOfYear.year = this.year;\r\n        lastDayOfYear.month = 11;\r\n        lastDayOfYear.day = 31;\r\n        const gDate = new Date(this.toGregorian(lastDayOfYear));\r\n        const startDayOfTheYear = new Date(this.year, 0, 1);\r\n        const gStartDayOfTheYear = new Date(startDayOfTheYear.getFullYear(),\r\n            startDayOfTheYear.getMonth(), startDayOfTheYear.getDate());\r\n        const week1 = gDate.getTime() + (1000 * 60 * 60 * 24);\r\n        const week2 = gStartDayOfTheYear.getTime();\r\n        return Math.ceil((week1 - week2) / (1000 * 60 * 60 * 24 * 7));\r\n    }\r\n    get weekYear(): number {\r\n        const gDate = new Date(this.toGregorian(this));\r\n        const startDayOfTheYear = new Date(this.year, 0, 1);\r\n        const gStartDayOfTheYear = new Date(startDayOfTheYear.getFullYear(),\r\n            startDayOfTheYear.getMonth(), startDayOfTheYear.getDate());\r\n        const week1 = gDate.getTime() + (1000 * 60 * 60 * 24);\r\n        const week2 = gStartDayOfTheYear.getTime();\r\n        return Math.ceil((week1 - week2) / (1000 * 60 * 60 * 24 * 7));\r\n    }\r\n    get isLeapYear(): boolean {\r\n        return (new Date(this.year, 1, 29).getDate() === 29);\r\n    }\r\n    get quarter(): number {\r\n        return Math.floor((this.month + 3) / 3);\r\n    }\r\n\r\n}\r\n"],"sourceRoot":""}